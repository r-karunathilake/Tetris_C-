!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Block	blocks/block.cpp	/^Block::Block(std::map<int, posVect> cells, int id, $/;"	f	class:Block
Block	blocks/block.h	/^class Block{$/;"	c
CXX	Makefile	/^CXX      := clang++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS := $(DEBUG) $(STD) $(OPT) $(WARN) $(SFML)$/;"	m
Color	blocks/tilecolors.h	/^  enum Color{$/;"	g	namespace:CustomColors
CustomColors	blocks/tilecolors.h	/^namespace CustomColors{$/;"	n
DEBUG	Makefile	/^DEBUG    := -g$/;"	m
IBlock	blocks/iblock.cpp	/^    IBlock() $/;"	f	class:IBlock
IBlock	blocks/iblock.cpp	/^class IBlock : public Block{$/;"	c	file:
JBlock	blocks/jblock.cpp	/^    JBlock() $/;"	f	class:JBlock
JBlock	blocks/jblock.cpp	/^class JBlock : public Block{$/;"	c	file:
LBlock	blocks/lblock.cpp	/^    LBlock() $/;"	f	class:LBlock
LBlock	blocks/lblock.cpp	/^class LBlock : public Block{$/;"	c	file:
OBJS	Makefile	/^OBJS     := $(SOURCE:.cpp=.o) # Pattern substitution $/;"	m
OBlock	blocks/oblock.cpp	/^    OBlock() $/;"	f	class:OBlock
OBlock	blocks/oblock.cpp	/^class OBlock : public Block{$/;"	c	file:
OPT	Makefile	/^OPT      := -O0 # Disable compiler optimization $/;"	m
Position	blocks/position.cpp	/^Position::Position(std::ptrdiff_t row, std::ptrdiff_t column) $/;"	f	class:Position
Position	blocks/position.h	/^class Position{$/;"	c
SBlock	blocks/sblock.cpp	/^    SBlock() $/;"	f	class:SBlock
SBlock	blocks/sblock.cpp	/^class SBlock : public Block{$/;"	c	file:
SFML	Makefile	/^SFML     := -lsfml-graphics -lsfml-window -lsfml-system$/;"	m
SOURCE	Makefile	/^SOURCE   := main.cpp tetris.cpp $(wildcard **\/*.cpp)$/;"	m
STD	Makefile	/^STD      := -std=c++20$/;"	m
TARGET	Makefile	/^TARGET   := tetris$/;"	m
TBlock	blocks/tblock.cpp	/^    TBlock() $/;"	f	class:TBlock
TBlock	blocks/tblock.cpp	/^class TBlock : public Block{$/;"	c	file:
Tetris	tetris.cpp	/^Tetris::Tetris() $/;"	f	class:Tetris
Tetris	tetris.h	/^class Tetris{$/;"	c
WARN	Makefile	/^WARN     := -Wall$/;"	m
ZBlock	blocks/zblock.cpp	/^    ZBlock() $/;"	f	class:ZBlock
ZBlock	blocks/zblock.cpp	/^class ZBlock : public Block{$/;"	c	file:
clearAllCompleteGridRows	tetris.cpp	/^int Tetris::clearAllCompleteGridRows(){$/;"	f	class:Tetris
clearGridRow	tetris.cpp	/^void Tetris::clearGridRow(std::ptrdiff_t row){$/;"	f	class:Tetris
clock	tetris.h	/^    sf::Clock clock; \/\/ Start the SFML game clock$/;"	m	class:Tetris
color_blue	blocks/tilecolors.h	/^    color_blue,$/;"	e	enum:CustomColors::Color
color_cyan	blocks/tilecolors.h	/^    color_cyan,$/;"	e	enum:CustomColors::Color
color_dark_grey	blocks/tilecolors.h	/^    color_dark_grey,$/;"	e	enum:CustomColors::Color
color_green	blocks/tilecolors.h	/^    color_green,$/;"	e	enum:CustomColors::Color
color_orange	blocks/tilecolors.h	/^    color_orange,$/;"	e	enum:CustomColors::Color
color_purple	blocks/tilecolors.h	/^    color_purple,$/;"	e	enum:CustomColors::Color
color_red	blocks/tilecolors.h	/^    color_red,$/;"	e	enum:CustomColors::Color
color_transparent	blocks/tilecolors.h	/^    color_transparent,    $/;"	e	enum:CustomColors::Color
color_yellow	blocks/tilecolors.h	/^    color_yellow,$/;"	e	enum:CustomColors::Color
configGameWindow	tetris.cpp	/^std::shared_ptr<sf::RenderWindow> Tetris::configGameWindow() const{$/;"	f	class:Tetris
draw	blocks/block.cpp	/^void Block::draw(std::shared_ptr<sf::RenderWindow> pWindow, int offsetX, int offsetY) {$/;"	f	class:Block
draw	tetris.cpp	/^void Tetris::draw(){$/;"	f	class:Tetris
drawGUI	tetris.cpp	/^void Tetris::drawGUI(){$/;"	f	class:Tetris
drawGrid	tetris.cpp	/^void Tetris::drawGrid(){$/;"	f	class:Tetris
drawNextBoard	tetris.cpp	/^void Tetris::drawNextBoard(const sf::Vector2f& size, const sf::Vector2f& position) const{$/;"	f	class:Tetris
drawRoundedRectangle	tetris.cpp	/^void Tetris::drawRoundedRectangle(const sf::Vector2f& size, const sf::Vector2f& position) const{$/;"	f	class:Tetris
drawScoreBoard	tetris.cpp	/^void Tetris::drawScoreBoard(const sf::Vector2f& size, const sf::Vector2f& position) const{$/;"	f	class:Tetris
events	tetris.cpp	/^void Tetris::events(){$/;"	f	class:Tetris
freezeBlock	tetris.cpp	/^void Tetris::freezeBlock(){$/;"	f	class:Tetris
getColor	blocks/block.cpp	/^CustomColors::Color Block::getColor() const{return m_color;}$/;"	f	class:Block
getColumn	blocks/position.cpp	/^std::ptrdiff_t Position::getColumn() const{return m_column;}$/;"	f	class:Position
getGameBlocks	tetris.cpp	/^std::vector<std::unique_ptr<Block>> Tetris::getGameBlocks() const{$/;"	f	class:Tetris
getID	blocks/block.cpp	/^int Block::getID() const {return m_id;}$/;"	f	class:Block
getNextValidState	blocks/block.cpp	/^int Block::getNextValidState() const{$/;"	f	class:Block
getNumStates	blocks/block.cpp	/^std::size_t Block::getNumStates() const{$/;"	f	class:Block
getRandomBlock	tetris.cpp	/^std::unique_ptr<Block> Tetris::getRandomBlock(){$/;"	f	class:Tetris
getRow	blocks/position.cpp	/^std::ptrdiff_t Position::getRow() const{return m_row;}$/;"	f	class:Position
getSFMLColor	blocks/tilecolors.h	/^inline sf::Color getSFMLColor (CustomColors::Color color){$/;"	f
getState	blocks/block.cpp	/^int Block::getState() const{return m_rotationalState;}$/;"	f	class:Block
getTilePositions	blocks/block.cpp	/^posVect& Block::getTilePositions() {$/;"	f	class:Block
getTilePositions	blocks/block.cpp	/^posVect& Block::getTilePositions(int state){$/;"	f	class:Block
isGameUpdateEvent	tetris.cpp	/^bool Tetris::isGameUpdateEvent(){$/;"	f	class:Tetris
isGridCellEmpty	tetris.cpp	/^bool Tetris::isGridCellEmpty(std::ptrdiff_t row, std::ptrdiff_t column) const{$/;"	f	class:Tetris
isGridRowComplete	tetris.cpp	/^bool Tetris::isGridRowComplete(std::ptrdiff_t row) const{$/;"	f	class:Tetris
isMovePending	blocks/block.cpp	/^bool Block::isMovePending() const{$/;"	f	class:Block
isValidMove	tetris.cpp	/^bool Tetris::isValidMove(std::ptrdiff_t row, std::ptrdiff_t column) const{$/;"	f	class:Tetris
isValidRotation	tetris.cpp	/^bool Tetris::isValidRotation(int nextState) const{$/;"	f	class:Tetris
isValidTiles	tetris.cpp	/^bool Tetris::isValidTiles(const std::vector<Position>& tilePositions) const{$/;"	f	class:Tetris
main	main.cpp	/^int main(int argc, char** argv){$/;"	f
move	blocks/block.cpp	/^void Block::move(int rows, int columns){$/;"	f	class:Block
moveBlockDown	tetris.cpp	/^void Tetris::moveBlockDown(){$/;"	f	class:Tetris
moveGridRowDown	tetris.cpp	/^void Tetris::moveGridRowDown(std::ptrdiff_t row, std::ptrdiff_t numRowsDown){$/;"	f	class:Tetris
noValidMoves	tetris.cpp	/^bool Tetris::noValidMoves() const{$/;"	f	class:Tetris
operator <<	blocks/block.cpp	/^std::ostream& operator<< (std::ostream& out, const Block& obj){$/;"	f
operator <<	blocks/position.cpp	/^std::ostream& operator<< (std::ostream& out, const Position& obj){$/;"	f
printGrid	tetris.cpp	/^void Tetris::printGrid(){$/;"	f	class:Tetris
resetGameGrid	tetris.cpp	/^void Tetris::resetGameGrid(){$/;"	f	class:Tetris
resetOffsets	blocks/block.cpp	/^void Block::resetOffsets(){$/;"	f	class:Block
restartGame	tetris.cpp	/^void Tetris::restartGame(){$/;"	f	class:Tetris
rotate	blocks/block.cpp	/^void Block::rotate(){$/;"	f	class:Block
run	tetris.cpp	/^void Tetris::run(){ $/;"	f	class:Tetris
updateCellPositions	blocks/block.cpp	/^void Block::updateCellPositions(std::map<int, posVect>& tileStates){$/;"	f	class:Block
updateGameScore	tetris.cpp	/^void Tetris::updateGameScore(int linesCompleted, int numBlocksUsed){$/;"	f	class:Tetris
updatePosition	blocks/position.cpp	/^void Position::updatePosition(std::ptrdiff_t rowOffset, std::ptrdiff_t columnOffset){$/;"	f	class:Position
~Block	blocks/block.h	/^    virtual ~Block(){};$/;"	f	class:Block
